#%RAML 1.0

title: API-Vitam Version Alpha - Collect
version: v1
baseUri: https://api.vitam.gouv.fr/collect-external/{version}
protocols: [ HTTP ]

uses:
  StandardTypes: libraries/StandardTypes.raml
  StandardTraits: libraries/StandardTraits.raml
  CollectTraits: libraries/CollectTraits.raml

securitySchemes:
  VitamPlatform: !include ../externe/securitySchemes/SecuritySchemeVitam.raml

securedBy: [ VitamPlatform ]

mediaType: application/json

types:
  _reserved:
    type: string

documentation:
  - title: Avertissements
    content: !include ../externe/docs-fr/avertissement-collect.md

  - title: Licence
    content: !include ../externe/docs-fr/license.md

  - title: API Collect
    content: API Collect

/projects:
  displayName: Projects
  description: |
    API de collecte. Ce point d'entrée permet d'initialiser et de gérer un projet de versement.

    Création d'un projet :
    - une requête unique, avec un 'body' contenant toutes les informations au format JSON :
      - ArchivalAgencyIdentifier
      - TransferringAgencyIdentifier
      - OriginatingAgencyIdentifier
      - SubmissionAgencyIdentifier
      - MessageIdentifier
      - ArchivalAgreement
      - unitUp
      - Comment
      - LegalStatus
      - Name
  post:
    description: |
      - request body : JSON object
      - response : JSON of saved project / HTTP CODE 200
    is: [ CollectTraits.TransactionResponse, StandardTraits.StandardOptionalHeader,
          StandardTraits.StandardHeader401, StandardTraits.StandardHeader404,
          StandardTraits.StandardHeader409, StandardTraits.StandardHeader412 ]
    headers:
      x-tenant-id:
        required: true
    body:
      application/json:
        type: object
        example: !include libraries/examples/projectObjectRequest.json
    responses:
      200:
        body:
          application/json:
            type: object
            example: !include libraries/examples/projectObjectResponse.json
  put:
    description: |
      - request body : JSON object
      - response : JSON of saved project / HTTP CODE 200
    is: [ CollectTraits.TransactionResponse, StandardTraits.StandardOptionalHeader,
          StandardTraits.StandardHeader401, StandardTraits.StandardHeader404,
          StandardTraits.StandardHeader409, StandardTraits.StandardHeader412 ]
    headers:
      x-tenant-id:
        required: true
    body:
      application/json:
        type: object
        example: !include libraries/examples/projectObjectPutRequest.json
    responses:
      200:
        body:
          application/json:
            type: object
            example: !include libraries/examples/projectObjectResponse.json
  get:
    description: |
      - request body : JSON object
      - response : JSON of saved project / HTTP CODE 200
    is: [ StandardTraits.StandardOptionalHeader,
          StandardTraits.StandardHeader401, StandardTraits.StandardHeader404,
          StandardTraits.StandardHeader409, StandardTraits.StandardHeader412 ]
    headers:
      x-tenant-id:
        required: true
    responses:
      200:
        body:
          application/json:
            type: object
            example: !include libraries/examples/CollectListProjectsObjectResponse.json
  /{id}:
    description: |
      API de collecte. Ce point d'entrée permet de supprimer un projet.
    delete:
      is: [ StandardTraits.StandardOptionalHeader,
            StandardTraits.StandardHeader401, StandardTraits.StandardHeader404,
            StandardTraits.StandardHeader409, StandardTraits.StandardHeader412 ]
      headers:
        x-tenant-id:
          required: true
      responses:
        200:
  /{id}/transactions:
    displayName: Permet de gérer les transactions d'un projet
    is: [ StandardTraits.StandardOptionalHeader,
          StandardTraits.StandardHeader401, StandardTraits.StandardHeader404,
          StandardTraits.StandardHeader409, StandardTraits.StandardHeader412 ]
    post:
      description: |
        - request body : JSON object
        - response : JSON of saved transaction / HTTP CODE 200
      is: [ CollectTraits.TransactionResponse, StandardTraits.StandardOptionalHeader,
            StandardTraits.StandardHeader401, StandardTraits.StandardHeader404,
            StandardTraits.StandardHeader409, StandardTraits.StandardHeader412 ]
      headers:
        x-tenant-id:
          required: true
      body:
        application/json:
          type: object
          example: !include libraries/examples/transactionObjectRequest.json
      responses:
        200:
          body:
            application/json:
              type: object
              example: !include libraries/examples/transactionResponse.json
  /{id}/upload:
    displayName: upload d'une archive Zip à un projet avec gestion automatique des transactions
    is: [ StandardTraits.StandardOptionalHeader,
          StandardTraits.StandardHeader401, StandardTraits.StandardHeader404,
          StandardTraits.StandardHeader409, StandardTraits.StandardHeader412 ]
    post:
      description: |
        Permet de soumettre un ensemble de binaire au format Zip.
        L'arborescence est rattachée à une transaction auto-générée dont l'identifiant est retourné à l'appelant.
        Optionnellement, le Zip peut contenir un fichier "metadata.csv" ou "metadata.jsonl" décrivant l'ensemble des
        métadonnées de l'arborescence.

        Il est à noter que dans le cas d'un fichier de métadonnées au format JSONL (metadata.jsonl), la sélection des
        métadonnées peut se faire uniquement via le champ `File` ou via un sélecteur (champ `Selector`),
        limité à la clé `#uploadFile`.

        Attention : Cette API est alpha / expérimentale.
      body:
        application/zip:
      headers:
        X-tenant-Id:
          required: true
        X-Encoding:
          required: false
          description: "Encodage du zip, par default VITAM utilise UTF-8"
      responses:
        200:
          body:
            application/json:
              type: object
              example: !include libraries/examples/uploadZipToProjectResponseExample.json

/transactions:
  displayName: Transactions
  put:
    description: |
      - request body : JSON object
      - response : JSON of saved transaction / HTTP CODE 200
    is: [ CollectTraits.TransactionResponse, StandardTraits.StandardOptionalHeader,
          StandardTraits.StandardHeader401, StandardTraits.StandardHeader404,
          StandardTraits.StandardHeader409, StandardTraits.StandardHeader412 ]
    headers:
      x-tenant-id:
        required: true
    body:
      application/json:
        type: object
        example: !include libraries/examples/transactionPutObjectRequest.json
    responses:
      200:
        body:
          application/json:
            type: object
            example: !include libraries/examples/transactionResponse.json
  /{id}/units:
    is: [ StandardTraits.StandardOptionalHeader,
          StandardTraits.StandardHeader401, StandardTraits.StandardHeader404,
          StandardTraits.StandardHeader409, StandardTraits.StandardHeader412 ]
    uriParameters:
      id:
        required: true
        description: Identifiant de la transaction
    get:
      description: |
        Permet de retourner la liste des unités archivistique associés à l'identifiant de la transaction
      body:
        application/json:
          type: object
          example: !include libraries/examples/streamUnitRequest.json
      headers:
        X-tenant-Id:
          required: true
      responses:
        200:
          body:
            application/json:
              type: object
              example: !include libraries/examples/CollectUnitObjectResponse.json
    put:
      description: |
        Permet de mettre à jour les métadonnées à partir d'un fichier CSV en entrée.

        **/!\ Dépréciée**: Remplacée par l'API `PUT /collect-external/v1/transactions/{id}/units/metadata/csv`

        Permissions requises:
          - transaction:id:units:update

      body:
        application/octet-stream: Fichier CSV de MAJ
      headers:
        X-tenant-Id:
          required: true
      responses:
        200:
          body:
            application/json:
              type: object

    /metadata:
      /csv:
        put:
          description: |
            Permet de mettre à jour les métadonnées à partir d'un fichier de métadonnées CSV en entrée.

            **Attention:** Le fichier CSV doit être séparé par des point-virgules (`;`), et sans lignes vides.

            **NB.** Le nombre de lignes du fichier de métadonnées CSV en entrée doit rester raisonnable,
            idéalement pas plus de 1000 par appel.

            **Important :** L'API est synchrone / bloquante, et peut prendre quelques instants.

            Permissions requises:
              - transaction:id:units:metadata:csv:update

          body:
            text/csv:
              Description: Fichier CSV de MAJ.
              example: !include libraries/examples/CollectMetadata.csv

          headers:
            X-tenant-Id:
              required: true
          responses:
            200:
              body:
                application/json:
                  type: object

      /jsonl:
        put:
          description: |
            Permet de mettre à jour les métadonnées à partir d'un fichier de métadonnées JSONL (JSON-Lines) en entrée.

            Chaque ligne cible une unité archivistique de la transaction soit via le champ `File` qui sélectionne
            l'unité d'archives par son chemin dans le zip au format "Dossier/Sous-Dossier/Fichier.ext"), soit via un ou
            plusieurs sélecteurs libres (chaine de type "keyword", booléen, nombre), via le champ `Selector`.

            La mise à jour des métadonnées se fait au niveau des champs "racines" (de premier niveau), et se traduit par :
            - l'insertion du champ, si celui ci n'existe pas ;
            - le remplacement du champ (et de toute son arborescence), si le champ existe déjà ;
            - la suppression du champ si celui-ci pour valeur `null`.

            Pour modifier un ou plusieurs champs feuilles et/ou intermédiaires, il convient de spécifier la valeur du
            champ racine parent. Ex. Pour modifier la `StartDate` d'une règle d'accès
            `#management.AccessRule.Rules.StartDate`, il faut spécifier la nouvelle valeur pour tout le champ racine
            `#management`.

            **NB.** Les règles de gestion peuvent définir des `StartDate`, mais ne peuvent définir de `EndDate`
            (calculées par Vitam lors du versement de la transaction).

            **NB.** Les champs Vitam `#management` et `#history` peuvent être spécifiés pour la mise à jour des
            métadonnées de gestion et historisées. Les autres champs internes à Vitam (ex. `#version`,
            `#originating_agency`...) ne sont, quant-à eux, pas modifiables.

            **NB.** Le nombre de lignes du fichier de métadonnées JSONL (JSON-Lines) en entrée doit rester raisonnable,
            idéalement pas plus de 1000 par appel.
            Il est limité à un seuil maximum de 100 000.

            **Important :** L'API est synchrone / bloquante, et peut prendre quelques instants.

            **Important :** Le comportement en cas de sélecteur en doublon est **non-supporté** / **non-déterminé**.

            Permissions requises:
              - transaction:id:units:metadata:jsonl:update

          body:
            application/octet-stream:
              Description: Fichier JSONL (JSON-Lines) de MAJ.
              example: !include libraries/examples/CollectMetadata.jsonl

          headers:
            X-tenant-Id:
              required: true
          responses:
            200:
              body:
                application/json:
                  type: object

    /bulk:
      post:
        description: |
          Mise à jour unitaire des métadonnées descriptives de plusieurs unités archivistiques de la transaction.

          La requête utilise le langage de requête DSL de type **mise à jour unitaire de masse (BULK UPDATE)** de Vitam en entrée.

          Le nombre de requêtes unitaires doit rester raisonnable, idéalement pas plus de 1000 par appel.
          Il est limité à un seuil maximum de 100 000 par défaut.
          Ce seuil peut être redéfini dans la requête via le paramètre `threshold`.

          **Important :** L'API est synchrone / bloquante, et peut prendre quelques instants.

          Permissions requises:
            - transaction:id:units:bulk:update
        is: [CollectTraits.CollectBulkAtomicUpdateResponse]

  /{id}/unitsWithInheritedRules:
    is: [ StandardTraits.StandardOptionalHeader,
          StandardTraits.StandardHeader401, StandardTraits.StandardHeader404,
          StandardTraits.StandardHeader409, StandardTraits.StandardHeader412 ]
    uriParameters:
      id:
        required: true
        description: |
          Identifiant de la transaction

    get:
      description: |
        API pour accéder aux Unités d'archives liées à une transaction avec leurs règles de gestion héritées .
        La requête utilise le langage de requête DSL de Vitam en entrée et retourne une liste d'Unités d'archives
        avec leurs règles de gestion selon le DSL Vitam en cas de succès.

        Permissions requises:
          - transaction:unitsWithInheritedRules:read
      is: [ CollectTraits.CollectUnitWithInheritedRulesResponse ]
      headers:
        X-tenant-Id:
          required: true
      body:
        application/json:
          type: object
      responses:
        200:
          body:
            application/json:
              type: object
              example: !include libraries/examples/CollectUnitWithInheritedRulesResponse.json

  /{id}/close:
    displayName: Fermer une transaction -> statut Close
    is: [ StandardTraits.StandardOptionalHeader,
          StandardTraits.StandardHeader401, StandardTraits.StandardHeader404,
          StandardTraits.StandardHeader409, StandardTraits.StandardHeader412 ]
    post:
      description: |
        Permet de fermer une transaction
      body:
        application/json:
      headers:
        X-tenant-Id:
          required: true
      responses:
        200:
          body:
            application/json:
              type: object
              example: !include libraries/examples/CollectTransactionCloseObjectResponse.json

  /{id}/send:
    displayName: Générer un SIP et envoyer le SIP a Vitam (Ingest)
    is: [ StandardTraits.StandardOptionalHeader,
          StandardTraits.StandardHeader401, StandardTraits.StandardHeader404,
          StandardTraits.StandardHeader409, StandardTraits.StandardHeader412 ]
    post:
      description: |
        Permet de générer un SIP et l'envoyer a Vitam (Ingest)
      body:
        application/json:
      headers:
        X-tenant-Id:
          required: true
      responses:
        200:
          body:
            application/json:
              type: object
              example: !include libraries/examples/CollectIngestObjectResponse.json
  /{id}:
    description: |
      API de collecte. Ce point d'entrée permet de supprimer une transaction.
    get:
      is: [ StandardTraits.StandardOptionalHeader,
            StandardTraits.StandardHeader401, StandardTraits.StandardHeader404,
            StandardTraits.StandardHeader409, StandardTraits.StandardHeader412 ]
      headers:
        x-tenant-id:
          required: true
      responses:
        200:
          body:
            application/json:
              type: object
              example: !include libraries/examples/transactionResponse.json
    delete:
      is: [ StandardTraits.StandardOptionalHeader,
            StandardTraits.StandardHeader401, StandardTraits.StandardHeader404,
            StandardTraits.StandardHeader409, StandardTraits.StandardHeader412 ]
      headers:
        x-tenant-id:
          required: true
      responses:
        200:
  /{id}/upload:
    displayName: upload d'une archive Zip à une transaction
    uriParameters:
      id:
        required: true
        description: Identifiant de la transaction
    is: [ StandardTraits.StandardOptionalHeader,
          StandardTraits.StandardHeader401, StandardTraits.StandardHeader404,
          StandardTraits.StandardHeader409, StandardTraits.StandardHeader412 ]
    post:
      description: |
        Permet de soumettre un ensemble de binaire au format Zip.
        Optionnellement, le Zip peut contenir un fichier "metadata.csv" ou "metadata.jsonl" décrivant l'ensemble des
        métadonnées de l'arborescence.

        Il est à noter que dans le cas d'un fichier de métadonnées au format JSONL (metadata.jsonl), la sélection des
        métadonnées peut se faire uniquement via le champ `File` ou via un sélecteur (champ `Selector`), limité à la clé
        `#uploadFile`.

      body:
        application/zip:
      headers:
        X-tenant-Id:
          required: true
        X-Encoding:
          required: false
          description: "Encodage du zip, par default VITAM utilise UTF-8"
      responses:
        200:
          body:
            application/json:
              type: object

/units:
  displayName: Units
  description: |
    API de collecte. Ce point d'entrée permet de gérer une unité archivistique et les groupe d'objets.
  is: [ StandardTraits.StandardOptionalHeader,
        StandardTraits.StandardHeader401, StandardTraits.StandardHeader404,
        StandardTraits.StandardHeader409, StandardTraits.StandardHeader412 ]

  /{id}:
    is: [ StandardTraits.StandardOptionalHeader,
          StandardTraits.StandardHeader401, StandardTraits.StandardHeader404,
          StandardTraits.StandardHeader409, StandardTraits.StandardHeader412 ]
    get:
      description: |
        Permet de retourner une unité archivistique par son id
      headers:
        X-tenant-Id:
          required: true
      responses:
        200:
          body:
            application/json:
              type: object
              example: !include libraries/examples/CollectUnitObjectResponse.json

  /{id}/objects/{usage}/{version}:
    displayName: Ajout d'un groupe d'objets
    is: [ StandardTraits.StandardOptionalHeader,
          StandardTraits.StandardHeader401, StandardTraits.StandardHeader404,
          StandardTraits.StandardHeader409, StandardTraits.StandardHeader412 ]
    post:
      description: |
        Permet de rajouter un groupe d'objets
      body:
        application/json:
          type: object
          example: !include libraries/examples/CollectObjectGroupObjectRequest.json
      headers:
        X-tenant-Id:
          required: true
      responses:
        200:
          body:
            application/json:
              type: object
              example: !include libraries/examples/CollectObjectGroupObjectResponse.json

  /{id}/objects/{usage}/{version}/binary:
    displayName: Ajout d'un binaire
    is: [ StandardTraits.StandardOptionalHeader,
          StandardTraits.StandardHeader401, StandardTraits.StandardHeader404,
          StandardTraits.StandardHeader409, StandardTraits.StandardHeader412 ]
    get:
      description: |
        Permet de télécharger un binaire
      headers:
        X-tenant-Id:
          required: true
      responses:
        200:
          body:
            application/octet-stream:
              description: Binary object as a file

    post:
      description: |
        Permet de rajouter un binaire
      body:
        application/octet-stream:
          description: Binary object as a file
      headers:
        X-tenant-Id:
          required: true
      responses:
        200:
          body:
            application/json:
              type: object
              example: !include libraries/examples/CollectBinaryObjectResponse.json

/objects:
  displayName: Objects
  description: |
    API de collecte. Ce point d'entrée permet de gérer les groupe d'objets.
  is: [ StandardTraits.StandardOptionalHeader,
        StandardTraits.StandardHeader401, StandardTraits.StandardHeader404,
        StandardTraits.StandardHeader409, StandardTraits.StandardHeader412 ]

  /{id}:
    is: [ StandardTraits.StandardOptionalHeader,
          StandardTraits.StandardHeader401, StandardTraits.StandardHeader404,
          StandardTraits.StandardHeader409, StandardTraits.StandardHeader412 ]
    get:
      description: |
        Permet de retourner une groupe d'objet par son id
      headers:
        X-tenant-Id:
          required: true
      responses:
        200:
          body:
            application/json:
              type: object
              example: !include libraries/examples/objectGroupResponse.json
